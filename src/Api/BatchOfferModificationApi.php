<?php
/**
 * BatchOfferModificationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AllegroApi\ApiException;
use AllegroApi\Configuration;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;

/**
 * BatchOfferModificationApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BatchOfferModificationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getGeneralReportUsingGET' => [
            'application/json',
        ],
        'getPriceModificationCommandStatusUsingGET' => [
            'application/json',
        ],
        'getPriceModificationCommandTasksStatusesUsingGET' => [
            'application/json',
        ],
        'getQuantityModificationCommandStatusUsingGET' => [
            'application/json',
        ],
        'getQuantityModificationCommandTasksStatusesUsingGET' => [
            'application/json',
        ],
        'getTasksUsingGET' => [
            'application/json',
        ],
        'modificationCommandUsingPUT' => [
            'application/vnd.allegro.public.v1+json',
        ],
        'priceModificationCommandUsingPUT' => [
            'application/vnd.allegro.public.v1+json',
        ],
        'quantityModificationCommandUsingPUT' => [
            'application/vnd.allegro.public.v1+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getGeneralReportUsingGET
     *
     * Modification command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeneralReportUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\GeneralReport
     */
    public function getGeneralReportUsingGET($command_id, string $contentType = self::contentTypes['getGeneralReportUsingGET'][0])
    {
        list($response) = $this->getGeneralReportUsingGETWithHttpInfo($command_id, $contentType);
        return $response;
    }

    /**
     * Operation getGeneralReportUsingGETWithHttpInfo
     *
     * Modification command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeneralReportUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\GeneralReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGeneralReportUsingGETWithHttpInfo($command_id, string $contentType = self::contentTypes['getGeneralReportUsingGET'][0])
    {
        $request = $this->getGeneralReportUsingGETRequest($command_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\GeneralReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\GeneralReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\GeneralReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\GeneralReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\GeneralReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGeneralReportUsingGETAsync
     *
     * Modification command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeneralReportUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeneralReportUsingGETAsync($command_id, string $contentType = self::contentTypes['getGeneralReportUsingGET'][0])
    {
        return $this->getGeneralReportUsingGETAsyncWithHttpInfo($command_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGeneralReportUsingGETAsyncWithHttpInfo
     *
     * Modification command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeneralReportUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeneralReportUsingGETAsyncWithHttpInfo($command_id, string $contentType = self::contentTypes['getGeneralReportUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\GeneralReport';
        $request = $this->getGeneralReportUsingGETRequest($command_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGeneralReportUsingGET'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeneralReportUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGeneralReportUsingGETRequest($command_id, string $contentType = self::contentTypes['getGeneralReportUsingGET'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getGeneralReportUsingGET'
            );
        }


        $resourcePath = '/sale/offer-modification-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPriceModificationCommandStatusUsingGET
     *
     * Change price command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\GeneralReport
     */
    public function getPriceModificationCommandStatusUsingGET($command_id, string $contentType = self::contentTypes['getPriceModificationCommandStatusUsingGET'][0])
    {
        list($response) = $this->getPriceModificationCommandStatusUsingGETWithHttpInfo($command_id, $contentType);
        return $response;
    }

    /**
     * Operation getPriceModificationCommandStatusUsingGETWithHttpInfo
     *
     * Change price command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\GeneralReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceModificationCommandStatusUsingGETWithHttpInfo($command_id, string $contentType = self::contentTypes['getPriceModificationCommandStatusUsingGET'][0])
    {
        $request = $this->getPriceModificationCommandStatusUsingGETRequest($command_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\GeneralReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\GeneralReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\GeneralReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\GeneralReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\GeneralReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPriceModificationCommandStatusUsingGETAsync
     *
     * Change price command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPriceModificationCommandStatusUsingGETAsync($command_id, string $contentType = self::contentTypes['getPriceModificationCommandStatusUsingGET'][0])
    {
        return $this->getPriceModificationCommandStatusUsingGETAsyncWithHttpInfo($command_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPriceModificationCommandStatusUsingGETAsyncWithHttpInfo
     *
     * Change price command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPriceModificationCommandStatusUsingGETAsyncWithHttpInfo($command_id, string $contentType = self::contentTypes['getPriceModificationCommandStatusUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\GeneralReport';
        $request = $this->getPriceModificationCommandStatusUsingGETRequest($command_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPriceModificationCommandStatusUsingGET'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPriceModificationCommandStatusUsingGETRequest($command_id, string $contentType = self::contentTypes['getPriceModificationCommandStatusUsingGET'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getPriceModificationCommandStatusUsingGET'
            );
        }


        $resourcePath = '/sale/offer-price-change-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPriceModificationCommandTasksStatusesUsingGET
     *
     * Change price command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\TaskReport
     */
    public function getPriceModificationCommandTasksStatusesUsingGET($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'][0])
    {
        list($response) = $this->getPriceModificationCommandTasksStatusesUsingGETWithHttpInfo($command_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getPriceModificationCommandTasksStatusesUsingGETWithHttpInfo
     *
     * Change price command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\TaskReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceModificationCommandTasksStatusesUsingGETWithHttpInfo($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'][0])
    {
        $request = $this->getPriceModificationCommandTasksStatusesUsingGETRequest($command_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\TaskReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\TaskReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\TaskReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\TaskReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\TaskReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPriceModificationCommandTasksStatusesUsingGETAsync
     *
     * Change price command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPriceModificationCommandTasksStatusesUsingGETAsync($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'][0])
    {
        return $this->getPriceModificationCommandTasksStatusesUsingGETAsyncWithHttpInfo($command_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPriceModificationCommandTasksStatusesUsingGETAsyncWithHttpInfo
     *
     * Change price command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPriceModificationCommandTasksStatusesUsingGETAsyncWithHttpInfo($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\TaskReport';
        $request = $this->getPriceModificationCommandTasksStatusesUsingGETRequest($command_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPriceModificationCommandTasksStatusesUsingGET'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPriceModificationCommandTasksStatusesUsingGETRequest($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getPriceModificationCommandTasksStatusesUsingGET'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getPriceModificationCommandTasksStatusesUsingGET'
            );
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BatchOfferModificationApi.getPriceModificationCommandTasksStatusesUsingGET, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BatchOfferModificationApi.getPriceModificationCommandTasksStatusesUsingGET, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset > 999) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BatchOfferModificationApi.getPriceModificationCommandTasksStatusesUsingGET, must be smaller than or equal to 999.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BatchOfferModificationApi.getPriceModificationCommandTasksStatusesUsingGET, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/sale/offer-price-change-commands/{commandId}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuantityModificationCommandStatusUsingGET
     *
     * Change quantity command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\GeneralReport
     */
    public function getQuantityModificationCommandStatusUsingGET($command_id, string $contentType = self::contentTypes['getQuantityModificationCommandStatusUsingGET'][0])
    {
        list($response) = $this->getQuantityModificationCommandStatusUsingGETWithHttpInfo($command_id, $contentType);
        return $response;
    }

    /**
     * Operation getQuantityModificationCommandStatusUsingGETWithHttpInfo
     *
     * Change quantity command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\GeneralReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuantityModificationCommandStatusUsingGETWithHttpInfo($command_id, string $contentType = self::contentTypes['getQuantityModificationCommandStatusUsingGET'][0])
    {
        $request = $this->getQuantityModificationCommandStatusUsingGETRequest($command_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\GeneralReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\GeneralReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\GeneralReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\GeneralReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\GeneralReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuantityModificationCommandStatusUsingGETAsync
     *
     * Change quantity command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuantityModificationCommandStatusUsingGETAsync($command_id, string $contentType = self::contentTypes['getQuantityModificationCommandStatusUsingGET'][0])
    {
        return $this->getQuantityModificationCommandStatusUsingGETAsyncWithHttpInfo($command_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuantityModificationCommandStatusUsingGETAsyncWithHttpInfo
     *
     * Change quantity command summary
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuantityModificationCommandStatusUsingGETAsyncWithHttpInfo($command_id, string $contentType = self::contentTypes['getQuantityModificationCommandStatusUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\GeneralReport';
        $request = $this->getQuantityModificationCommandStatusUsingGETRequest($command_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuantityModificationCommandStatusUsingGET'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandStatusUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getQuantityModificationCommandStatusUsingGETRequest($command_id, string $contentType = self::contentTypes['getQuantityModificationCommandStatusUsingGET'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getQuantityModificationCommandStatusUsingGET'
            );
        }


        $resourcePath = '/sale/offer-quantity-change-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuantityModificationCommandTasksStatusesUsingGET
     *
     * Change quantity command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\TaskReport
     */
    public function getQuantityModificationCommandTasksStatusesUsingGET($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'][0])
    {
        list($response) = $this->getQuantityModificationCommandTasksStatusesUsingGETWithHttpInfo($command_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getQuantityModificationCommandTasksStatusesUsingGETWithHttpInfo
     *
     * Change quantity command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\TaskReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuantityModificationCommandTasksStatusesUsingGETWithHttpInfo($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'][0])
    {
        $request = $this->getQuantityModificationCommandTasksStatusesUsingGETRequest($command_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\TaskReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\TaskReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\TaskReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\TaskReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\TaskReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuantityModificationCommandTasksStatusesUsingGETAsync
     *
     * Change quantity command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuantityModificationCommandTasksStatusesUsingGETAsync($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'][0])
    {
        return $this->getQuantityModificationCommandTasksStatusesUsingGETAsyncWithHttpInfo($command_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuantityModificationCommandTasksStatusesUsingGETAsyncWithHttpInfo
     *
     * Change quantity command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuantityModificationCommandTasksStatusesUsingGETAsyncWithHttpInfo($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\TaskReport';
        $request = $this->getQuantityModificationCommandTasksStatusesUsingGETRequest($command_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuantityModificationCommandTasksStatusesUsingGET'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getQuantityModificationCommandTasksStatusesUsingGETRequest($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getQuantityModificationCommandTasksStatusesUsingGET'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getQuantityModificationCommandTasksStatusesUsingGET'
            );
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BatchOfferModificationApi.getQuantityModificationCommandTasksStatusesUsingGET, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BatchOfferModificationApi.getQuantityModificationCommandTasksStatusesUsingGET, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset > 999) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BatchOfferModificationApi.getQuantityModificationCommandTasksStatusesUsingGET, must be smaller than or equal to 999.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BatchOfferModificationApi.getQuantityModificationCommandTasksStatusesUsingGET, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/sale/offer-quantity-change-commands/{commandId}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTasksUsingGET
     *
     * Modification command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTasksUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\TaskReport
     */
    public function getTasksUsingGET($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getTasksUsingGET'][0])
    {
        list($response) = $this->getTasksUsingGETWithHttpInfo($command_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getTasksUsingGETWithHttpInfo
     *
     * Modification command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTasksUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\TaskReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTasksUsingGETWithHttpInfo($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getTasksUsingGET'][0])
    {
        $request = $this->getTasksUsingGETRequest($command_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\TaskReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\TaskReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\TaskReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\TaskReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\TaskReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTasksUsingGETAsync
     *
     * Modification command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTasksUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTasksUsingGETAsync($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getTasksUsingGET'][0])
    {
        return $this->getTasksUsingGETAsyncWithHttpInfo($command_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTasksUsingGETAsyncWithHttpInfo
     *
     * Modification command detailed report
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTasksUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTasksUsingGETAsyncWithHttpInfo($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getTasksUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\TaskReport';
        $request = $this->getTasksUsingGETRequest($command_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTasksUsingGET'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTasksUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTasksUsingGETRequest($command_id, $limit = 100, $offset = 0, string $contentType = self::contentTypes['getTasksUsingGET'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getTasksUsingGET'
            );
        }

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BatchOfferModificationApi.getTasksUsingGET, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BatchOfferModificationApi.getTasksUsingGET, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset > 999) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BatchOfferModificationApi.getTasksUsingGET, must be smaller than or equal to 999.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BatchOfferModificationApi.getTasksUsingGET, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/sale/offer-modification-commands/{commandId}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modificationCommandUsingPUT
     *
     * Batch offer modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferChangeCommand $offer_change_command offerChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\GeneralReport
     */
    public function modificationCommandUsingPUT($command_id, $offer_change_command, string $contentType = self::contentTypes['modificationCommandUsingPUT'][0])
    {
        list($response) = $this->modificationCommandUsingPUTWithHttpInfo($command_id, $offer_change_command, $contentType);
        return $response;
    }

    /**
     * Operation modificationCommandUsingPUTWithHttpInfo
     *
     * Batch offer modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferChangeCommand $offer_change_command offerChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\GeneralReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function modificationCommandUsingPUTWithHttpInfo($command_id, $offer_change_command, string $contentType = self::contentTypes['modificationCommandUsingPUT'][0])
    {
        $request = $this->modificationCommandUsingPUTRequest($command_id, $offer_change_command, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\GeneralReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\GeneralReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\GeneralReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\GeneralReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\GeneralReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modificationCommandUsingPUTAsync
     *
     * Batch offer modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferChangeCommand $offer_change_command offerChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modificationCommandUsingPUTAsync($command_id, $offer_change_command, string $contentType = self::contentTypes['modificationCommandUsingPUT'][0])
    {
        return $this->modificationCommandUsingPUTAsyncWithHttpInfo($command_id, $offer_change_command, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modificationCommandUsingPUTAsyncWithHttpInfo
     *
     * Batch offer modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferChangeCommand $offer_change_command offerChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modificationCommandUsingPUTAsyncWithHttpInfo($command_id, $offer_change_command, string $contentType = self::contentTypes['modificationCommandUsingPUT'][0])
    {
        $returnType = '\AllegroApi\Model\GeneralReport';
        $request = $this->modificationCommandUsingPUTRequest($command_id, $offer_change_command, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modificationCommandUsingPUT'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferChangeCommand $offer_change_command offerChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modificationCommandUsingPUTRequest($command_id, $offer_change_command, string $contentType = self::contentTypes['modificationCommandUsingPUT'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling modificationCommandUsingPUT'
            );
        }

        // verify the required parameter 'offer_change_command' is set
        if ($offer_change_command === null || (is_array($offer_change_command) && count($offer_change_command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_change_command when calling modificationCommandUsingPUT'
            );
        }


        $resourcePath = '/sale/offer-modification-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($offer_change_command)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offer_change_command));
            } else {
                $httpBody = $offer_change_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceModificationCommandUsingPUT
     *
     * Batch offer price modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferPriceChangeCommand $offer_price_change_command offerPriceChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\GeneralReport
     */
    public function priceModificationCommandUsingPUT($command_id, $offer_price_change_command, string $contentType = self::contentTypes['priceModificationCommandUsingPUT'][0])
    {
        list($response) = $this->priceModificationCommandUsingPUTWithHttpInfo($command_id, $offer_price_change_command, $contentType);
        return $response;
    }

    /**
     * Operation priceModificationCommandUsingPUTWithHttpInfo
     *
     * Batch offer price modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferPriceChangeCommand $offer_price_change_command offerPriceChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\GeneralReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceModificationCommandUsingPUTWithHttpInfo($command_id, $offer_price_change_command, string $contentType = self::contentTypes['priceModificationCommandUsingPUT'][0])
    {
        $request = $this->priceModificationCommandUsingPUTRequest($command_id, $offer_price_change_command, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\GeneralReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\GeneralReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\GeneralReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\GeneralReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\GeneralReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceModificationCommandUsingPUTAsync
     *
     * Batch offer price modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferPriceChangeCommand $offer_price_change_command offerPriceChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceModificationCommandUsingPUTAsync($command_id, $offer_price_change_command, string $contentType = self::contentTypes['priceModificationCommandUsingPUT'][0])
    {
        return $this->priceModificationCommandUsingPUTAsyncWithHttpInfo($command_id, $offer_price_change_command, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceModificationCommandUsingPUTAsyncWithHttpInfo
     *
     * Batch offer price modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferPriceChangeCommand $offer_price_change_command offerPriceChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceModificationCommandUsingPUTAsyncWithHttpInfo($command_id, $offer_price_change_command, string $contentType = self::contentTypes['priceModificationCommandUsingPUT'][0])
    {
        $returnType = '\AllegroApi\Model\GeneralReport';
        $request = $this->priceModificationCommandUsingPUTRequest($command_id, $offer_price_change_command, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceModificationCommandUsingPUT'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferPriceChangeCommand $offer_price_change_command offerPriceChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceModificationCommandUsingPUTRequest($command_id, $offer_price_change_command, string $contentType = self::contentTypes['priceModificationCommandUsingPUT'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling priceModificationCommandUsingPUT'
            );
        }

        // verify the required parameter 'offer_price_change_command' is set
        if ($offer_price_change_command === null || (is_array($offer_price_change_command) && count($offer_price_change_command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_price_change_command when calling priceModificationCommandUsingPUT'
            );
        }


        $resourcePath = '/sale/offer-price-change-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($offer_price_change_command)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offer_price_change_command));
            } else {
                $httpBody = $offer_price_change_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quantityModificationCommandUsingPUT
     *
     * Batch offer quantity modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferQuantityChangeCommand $offer_quantity_change_command offerQuantityChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['quantityModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\GeneralReport
     */
    public function quantityModificationCommandUsingPUT($command_id, $offer_quantity_change_command, string $contentType = self::contentTypes['quantityModificationCommandUsingPUT'][0])
    {
        list($response) = $this->quantityModificationCommandUsingPUTWithHttpInfo($command_id, $offer_quantity_change_command, $contentType);
        return $response;
    }

    /**
     * Operation quantityModificationCommandUsingPUTWithHttpInfo
     *
     * Batch offer quantity modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferQuantityChangeCommand $offer_quantity_change_command offerQuantityChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['quantityModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\GeneralReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function quantityModificationCommandUsingPUTWithHttpInfo($command_id, $offer_quantity_change_command, string $contentType = self::contentTypes['quantityModificationCommandUsingPUT'][0])
    {
        $request = $this->quantityModificationCommandUsingPUTRequest($command_id, $offer_quantity_change_command, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\GeneralReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\GeneralReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\GeneralReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\GeneralReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\GeneralReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quantityModificationCommandUsingPUTAsync
     *
     * Batch offer quantity modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferQuantityChangeCommand $offer_quantity_change_command offerQuantityChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['quantityModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quantityModificationCommandUsingPUTAsync($command_id, $offer_quantity_change_command, string $contentType = self::contentTypes['quantityModificationCommandUsingPUT'][0])
    {
        return $this->quantityModificationCommandUsingPUTAsyncWithHttpInfo($command_id, $offer_quantity_change_command, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quantityModificationCommandUsingPUTAsyncWithHttpInfo
     *
     * Batch offer quantity modification
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferQuantityChangeCommand $offer_quantity_change_command offerQuantityChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['quantityModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quantityModificationCommandUsingPUTAsyncWithHttpInfo($command_id, $offer_quantity_change_command, string $contentType = self::contentTypes['quantityModificationCommandUsingPUT'][0])
    {
        $returnType = '\AllegroApi\Model\GeneralReport';
        $request = $this->quantityModificationCommandUsingPUTRequest($command_id, $offer_quantity_change_command, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quantityModificationCommandUsingPUT'
     *
     * @param  string $command_id Command identifier. (required)
     * @param  \AllegroApi\Model\OfferQuantityChangeCommand $offer_quantity_change_command offerQuantityChangeCommandDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['quantityModificationCommandUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function quantityModificationCommandUsingPUTRequest($command_id, $offer_quantity_change_command, string $contentType = self::contentTypes['quantityModificationCommandUsingPUT'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling quantityModificationCommandUsingPUT'
            );
        }

        // verify the required parameter 'offer_quantity_change_command' is set
        if ($offer_quantity_change_command === null || (is_array($offer_quantity_change_command) && count($offer_quantity_change_command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_quantity_change_command when calling quantityModificationCommandUsingPUT'
            );
        }


        $resourcePath = '/sale/offer-quantity-change-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($offer_quantity_change_command)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offer_quantity_change_command));
            } else {
                $httpBody = $offer_quantity_change_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
