<?php
/**
 * DisputesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AllegroApi\ApiException;
use AllegroApi\Configuration;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;

/**
 * DisputesApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DisputesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addMessageToDisputeUsingPOST' => [
            'application/vnd.allegro.public.v1+json',
        ],
        'createAnAttachmentUsingPOST' => [
            'application/vnd.allegro.public.v1+json',
        ],
        'getAttachmentUsingGET' => [
            'application/json',
        ],
        'getDisputeUsingGET' => [
            'application/json',
        ],
        'getListOfDisputesUsingGET' => [
            'application/json',
        ],
        'getMessagesFromDisputeUsingGET' => [
            'application/json',
        ],
        'uploadDisputeAttachmentUsingPUT' => [
            'image/png',
            'image/gif',
            'image/bmp',
            'image/tiff',
            'image/jpeg',
            'application/pdf',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addMessageToDisputeUsingPOST
     *
     * Add a message to a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  \AllegroApi\Model\MessageRequest $message_request Message request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMessageToDisputeUsingPOST'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\DisputeMessage
     */
    public function addMessageToDisputeUsingPOST($dispute_id, $message_request, string $contentType = self::contentTypes['addMessageToDisputeUsingPOST'][0])
    {
        list($response) = $this->addMessageToDisputeUsingPOSTWithHttpInfo($dispute_id, $message_request, $contentType);
        return $response;
    }

    /**
     * Operation addMessageToDisputeUsingPOSTWithHttpInfo
     *
     * Add a message to a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  \AllegroApi\Model\MessageRequest $message_request Message request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMessageToDisputeUsingPOST'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\DisputeMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMessageToDisputeUsingPOSTWithHttpInfo($dispute_id, $message_request, string $contentType = self::contentTypes['addMessageToDisputeUsingPOST'][0])
    {
        $request = $this->addMessageToDisputeUsingPOSTRequest($dispute_id, $message_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\DisputeMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\DisputeMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\DisputeMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\DisputeMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\DisputeMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMessageToDisputeUsingPOSTAsync
     *
     * Add a message to a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  \AllegroApi\Model\MessageRequest $message_request Message request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMessageToDisputeUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMessageToDisputeUsingPOSTAsync($dispute_id, $message_request, string $contentType = self::contentTypes['addMessageToDisputeUsingPOST'][0])
    {
        return $this->addMessageToDisputeUsingPOSTAsyncWithHttpInfo($dispute_id, $message_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMessageToDisputeUsingPOSTAsyncWithHttpInfo
     *
     * Add a message to a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  \AllegroApi\Model\MessageRequest $message_request Message request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMessageToDisputeUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMessageToDisputeUsingPOSTAsyncWithHttpInfo($dispute_id, $message_request, string $contentType = self::contentTypes['addMessageToDisputeUsingPOST'][0])
    {
        $returnType = '\AllegroApi\Model\DisputeMessage';
        $request = $this->addMessageToDisputeUsingPOSTRequest($dispute_id, $message_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMessageToDisputeUsingPOST'
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  \AllegroApi\Model\MessageRequest $message_request Message request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMessageToDisputeUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addMessageToDisputeUsingPOSTRequest($dispute_id, $message_request, string $contentType = self::contentTypes['addMessageToDisputeUsingPOST'][0])
    {

        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling addMessageToDisputeUsingPOST'
            );
        }

        // verify the required parameter 'message_request' is set
        if ($message_request === null || (is_array($message_request) && count($message_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_request when calling addMessageToDisputeUsingPOST'
            );
        }


        $resourcePath = '/sale/disputes/{disputeId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'disputeId' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($message_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($message_request));
            } else {
                $httpBody = $message_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAnAttachmentUsingPOST
     *
     * Create an attachment declaration
     *
     * @param  \AllegroApi\Model\AttachmentDeclaration $attachment_declaration A detailed declaration of a file to be uploaded (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnAttachmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\DisputeAttachmentId
     */
    public function createAnAttachmentUsingPOST($attachment_declaration, string $contentType = self::contentTypes['createAnAttachmentUsingPOST'][0])
    {
        list($response) = $this->createAnAttachmentUsingPOSTWithHttpInfo($attachment_declaration, $contentType);
        return $response;
    }

    /**
     * Operation createAnAttachmentUsingPOSTWithHttpInfo
     *
     * Create an attachment declaration
     *
     * @param  \AllegroApi\Model\AttachmentDeclaration $attachment_declaration A detailed declaration of a file to be uploaded (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnAttachmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\DisputeAttachmentId, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAnAttachmentUsingPOSTWithHttpInfo($attachment_declaration, string $contentType = self::contentTypes['createAnAttachmentUsingPOST'][0])
    {
        $request = $this->createAnAttachmentUsingPOSTRequest($attachment_declaration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\DisputeAttachmentId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\DisputeAttachmentId' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\DisputeAttachmentId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\DisputeAttachmentId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\DisputeAttachmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAnAttachmentUsingPOSTAsync
     *
     * Create an attachment declaration
     *
     * @param  \AllegroApi\Model\AttachmentDeclaration $attachment_declaration A detailed declaration of a file to be uploaded (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnAttachmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAnAttachmentUsingPOSTAsync($attachment_declaration, string $contentType = self::contentTypes['createAnAttachmentUsingPOST'][0])
    {
        return $this->createAnAttachmentUsingPOSTAsyncWithHttpInfo($attachment_declaration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAnAttachmentUsingPOSTAsyncWithHttpInfo
     *
     * Create an attachment declaration
     *
     * @param  \AllegroApi\Model\AttachmentDeclaration $attachment_declaration A detailed declaration of a file to be uploaded (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnAttachmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAnAttachmentUsingPOSTAsyncWithHttpInfo($attachment_declaration, string $contentType = self::contentTypes['createAnAttachmentUsingPOST'][0])
    {
        $returnType = '\AllegroApi\Model\DisputeAttachmentId';
        $request = $this->createAnAttachmentUsingPOSTRequest($attachment_declaration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAnAttachmentUsingPOST'
     *
     * @param  \AllegroApi\Model\AttachmentDeclaration $attachment_declaration A detailed declaration of a file to be uploaded (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnAttachmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAnAttachmentUsingPOSTRequest($attachment_declaration, string $contentType = self::contentTypes['createAnAttachmentUsingPOST'][0])
    {

        // verify the required parameter 'attachment_declaration' is set
        if ($attachment_declaration === null || (is_array($attachment_declaration) && count($attachment_declaration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_declaration when calling createAnAttachmentUsingPOST'
            );
        }


        $resourcePath = '/sale/dispute-attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($attachment_declaration)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($attachment_declaration));
            } else {
                $httpBody = $attachment_declaration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentUsingGET
     *
     * Get an attachment
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getAttachmentUsingGET($attachment_id, string $contentType = self::contentTypes['getAttachmentUsingGET'][0])
    {
        list($response) = $this->getAttachmentUsingGETWithHttpInfo($attachment_id, $contentType);
        return $response;
    }

    /**
     * Operation getAttachmentUsingGETWithHttpInfo
     *
     * Get an attachment
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentUsingGETWithHttpInfo($attachment_id, string $contentType = self::contentTypes['getAttachmentUsingGET'][0])
    {
        $request = $this->getAttachmentUsingGETRequest($attachment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentUsingGETAsync
     *
     * Get an attachment
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentUsingGETAsync($attachment_id, string $contentType = self::contentTypes['getAttachmentUsingGET'][0])
    {
        return $this->getAttachmentUsingGETAsyncWithHttpInfo($attachment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentUsingGETAsyncWithHttpInfo
     *
     * Get an attachment
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentUsingGETAsyncWithHttpInfo($attachment_id, string $contentType = self::contentTypes['getAttachmentUsingGET'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAttachmentUsingGETRequest($attachment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentUsingGET'
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttachmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentUsingGETRequest($attachment_id, string $contentType = self::contentTypes['getAttachmentUsingGET'][0])
    {

        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling getAttachmentUsingGET'
            );
        }


        $resourcePath = '/sale/dispute-attachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDisputeUsingGET
     *
     * Get a single dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\Dispute
     */
    public function getDisputeUsingGET($dispute_id, string $contentType = self::contentTypes['getDisputeUsingGET'][0])
    {
        list($response) = $this->getDisputeUsingGETWithHttpInfo($dispute_id, $contentType);
        return $response;
    }

    /**
     * Operation getDisputeUsingGETWithHttpInfo
     *
     * Get a single dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\Dispute, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDisputeUsingGETWithHttpInfo($dispute_id, string $contentType = self::contentTypes['getDisputeUsingGET'][0])
    {
        $request = $this->getDisputeUsingGETRequest($dispute_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\Dispute' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\Dispute' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\Dispute', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\Dispute';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\Dispute',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDisputeUsingGETAsync
     *
     * Get a single dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisputeUsingGETAsync($dispute_id, string $contentType = self::contentTypes['getDisputeUsingGET'][0])
    {
        return $this->getDisputeUsingGETAsyncWithHttpInfo($dispute_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDisputeUsingGETAsyncWithHttpInfo
     *
     * Get a single dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisputeUsingGETAsyncWithHttpInfo($dispute_id, string $contentType = self::contentTypes['getDisputeUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\Dispute';
        $request = $this->getDisputeUsingGETRequest($dispute_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDisputeUsingGET'
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDisputeUsingGETRequest($dispute_id, string $contentType = self::contentTypes['getDisputeUsingGET'][0])
    {

        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling getDisputeUsingGET'
            );
        }


        $resourcePath = '/sale/disputes/{disputeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'disputeId' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListOfDisputesUsingGET
     *
     * Get the user&#39;s disputes
     *
     * @param  string $checkout_form_id Checkout form identifier. (optional)
     * @param  int $limit The maximum number of disputes in a response. (optional, default to 10)
     * @param  int $offset Index of first returned dispute. (optional, default to 0)
     * @param  string[] $status Filter disputes with given set of statuses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfDisputesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\DisputeListResponse
     */
    public function getListOfDisputesUsingGET($checkout_form_id = null, $limit = 10, $offset = 0, $status = null, string $contentType = self::contentTypes['getListOfDisputesUsingGET'][0])
    {
        list($response) = $this->getListOfDisputesUsingGETWithHttpInfo($checkout_form_id, $limit, $offset, $status, $contentType);
        return $response;
    }

    /**
     * Operation getListOfDisputesUsingGETWithHttpInfo
     *
     * Get the user&#39;s disputes
     *
     * @param  string $checkout_form_id Checkout form identifier. (optional)
     * @param  int $limit The maximum number of disputes in a response. (optional, default to 10)
     * @param  int $offset Index of first returned dispute. (optional, default to 0)
     * @param  string[] $status Filter disputes with given set of statuses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfDisputesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\DisputeListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListOfDisputesUsingGETWithHttpInfo($checkout_form_id = null, $limit = 10, $offset = 0, $status = null, string $contentType = self::contentTypes['getListOfDisputesUsingGET'][0])
    {
        $request = $this->getListOfDisputesUsingGETRequest($checkout_form_id, $limit, $offset, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\DisputeListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\DisputeListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\DisputeListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\DisputeListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\DisputeListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListOfDisputesUsingGETAsync
     *
     * Get the user&#39;s disputes
     *
     * @param  string $checkout_form_id Checkout form identifier. (optional)
     * @param  int $limit The maximum number of disputes in a response. (optional, default to 10)
     * @param  int $offset Index of first returned dispute. (optional, default to 0)
     * @param  string[] $status Filter disputes with given set of statuses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfDisputesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfDisputesUsingGETAsync($checkout_form_id = null, $limit = 10, $offset = 0, $status = null, string $contentType = self::contentTypes['getListOfDisputesUsingGET'][0])
    {
        return $this->getListOfDisputesUsingGETAsyncWithHttpInfo($checkout_form_id, $limit, $offset, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListOfDisputesUsingGETAsyncWithHttpInfo
     *
     * Get the user&#39;s disputes
     *
     * @param  string $checkout_form_id Checkout form identifier. (optional)
     * @param  int $limit The maximum number of disputes in a response. (optional, default to 10)
     * @param  int $offset Index of first returned dispute. (optional, default to 0)
     * @param  string[] $status Filter disputes with given set of statuses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfDisputesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfDisputesUsingGETAsyncWithHttpInfo($checkout_form_id = null, $limit = 10, $offset = 0, $status = null, string $contentType = self::contentTypes['getListOfDisputesUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\DisputeListResponse';
        $request = $this->getListOfDisputesUsingGETRequest($checkout_form_id, $limit, $offset, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListOfDisputesUsingGET'
     *
     * @param  string $checkout_form_id Checkout form identifier. (optional)
     * @param  int $limit The maximum number of disputes in a response. (optional, default to 10)
     * @param  int $offset Index of first returned dispute. (optional, default to 0)
     * @param  string[] $status Filter disputes with given set of statuses. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfDisputesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListOfDisputesUsingGETRequest($checkout_form_id = null, $limit = 10, $offset = 0, $status = null, string $contentType = self::contentTypes['getListOfDisputesUsingGET'][0])
    {


        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DisputesApi.getListOfDisputesUsingGET, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DisputesApi.getListOfDisputesUsingGET, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DisputesApi.getListOfDisputesUsingGET, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/sale/disputes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $checkout_form_id,
            'checkoutForm.id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMessagesFromDisputeUsingGET
     *
     * Get the messages within a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  int $limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param  int $offset Index of first returned message within dispute. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesFromDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\DisputeMessageList
     */
    public function getMessagesFromDisputeUsingGET($dispute_id, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getMessagesFromDisputeUsingGET'][0])
    {
        list($response) = $this->getMessagesFromDisputeUsingGETWithHttpInfo($dispute_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getMessagesFromDisputeUsingGETWithHttpInfo
     *
     * Get the messages within a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  int $limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param  int $offset Index of first returned message within dispute. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesFromDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\DisputeMessageList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessagesFromDisputeUsingGETWithHttpInfo($dispute_id, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getMessagesFromDisputeUsingGET'][0])
    {
        $request = $this->getMessagesFromDisputeUsingGETRequest($dispute_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\DisputeMessageList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\DisputeMessageList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\DisputeMessageList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\DisputeMessageList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\DisputeMessageList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMessagesFromDisputeUsingGETAsync
     *
     * Get the messages within a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  int $limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param  int $offset Index of first returned message within dispute. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesFromDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesFromDisputeUsingGETAsync($dispute_id, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getMessagesFromDisputeUsingGET'][0])
    {
        return $this->getMessagesFromDisputeUsingGETAsyncWithHttpInfo($dispute_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessagesFromDisputeUsingGETAsyncWithHttpInfo
     *
     * Get the messages within a dispute
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  int $limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param  int $offset Index of first returned message within dispute. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesFromDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesFromDisputeUsingGETAsyncWithHttpInfo($dispute_id, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getMessagesFromDisputeUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\DisputeMessageList';
        $request = $this->getMessagesFromDisputeUsingGETRequest($dispute_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessagesFromDisputeUsingGET'
     *
     * @param  string $dispute_id Dispute identifier. (required)
     * @param  int $limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param  int $offset Index of first returned message within dispute. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesFromDisputeUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMessagesFromDisputeUsingGETRequest($dispute_id, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getMessagesFromDisputeUsingGET'][0])
    {

        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling getMessagesFromDisputeUsingGET'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DisputesApi.getMessagesFromDisputeUsingGET, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DisputesApi.getMessagesFromDisputeUsingGET, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DisputesApi.getMessagesFromDisputeUsingGET, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/sale/disputes/{disputeId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'disputeId' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadDisputeAttachmentUsingPUT
     *
     * Upload a dispute message attachment
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://upload.{environment}
     *  Variables:
     *    - environment:  No description provided
     *      Allowed values:
     *        - allegro.pl
     *        - allegro.pl.allegrosandbox.pl
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  \SplFileObject $body body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDisputeAttachmentUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uploadDisputeAttachmentUsingPUT($attachment_id, $body, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['uploadDisputeAttachmentUsingPUT'][0])
    {
        $this->uploadDisputeAttachmentUsingPUTWithHttpInfo($attachment_id, $body, $hostIndex, $variables, $contentType);
    }

    /**
     * Operation uploadDisputeAttachmentUsingPUTWithHttpInfo
     *
     * Upload a dispute message attachment
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://upload.{environment}
     *  Variables:
     *    - environment:  No description provided
     *      Allowed values:
     *        - allegro.pl
     *        - allegro.pl.allegrosandbox.pl
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  \SplFileObject $body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDisputeAttachmentUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadDisputeAttachmentUsingPUTWithHttpInfo($attachment_id, $body, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['uploadDisputeAttachmentUsingPUT'][0])
    {
        $request = $this->uploadDisputeAttachmentUsingPUTRequest($attachment_id, $body, $hostIndex, $variables, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation uploadDisputeAttachmentUsingPUTAsync
     *
     * Upload a dispute message attachment
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://upload.{environment}
     *  Variables:
     *    - environment:  No description provided
     *      Allowed values:
     *        - allegro.pl
     *        - allegro.pl.allegrosandbox.pl
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  \SplFileObject $body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDisputeAttachmentUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDisputeAttachmentUsingPUTAsync($attachment_id, $body, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['uploadDisputeAttachmentUsingPUT'][0])
    {
        return $this->uploadDisputeAttachmentUsingPUTAsyncWithHttpInfo($attachment_id, $body, $hostIndex, $variables, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadDisputeAttachmentUsingPUTAsyncWithHttpInfo
     *
     * Upload a dispute message attachment
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://upload.{environment}
     *  Variables:
     *    - environment:  No description provided
     *      Allowed values:
     *        - allegro.pl
     *        - allegro.pl.allegrosandbox.pl
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  \SplFileObject $body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDisputeAttachmentUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDisputeAttachmentUsingPUTAsyncWithHttpInfo($attachment_id, $body, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['uploadDisputeAttachmentUsingPUT'][0])
    {
        $returnType = '';
        $request = $this->uploadDisputeAttachmentUsingPUTRequest($attachment_id, $body, $hostIndex, $variables, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadDisputeAttachmentUsingPUT'
     *
    * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
    * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://upload.{environment}
     *  Variables:
    *    - environment:  No description provided
     *      Allowed values:
     *        - allegro.pl
     *        - allegro.pl.allegrosandbox.pl
     *
     * @param  string $attachment_id Attachment identifier. (required)
     * @param  \SplFileObject $body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDisputeAttachmentUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadDisputeAttachmentUsingPUTRequest($attachment_id, $body, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['uploadDisputeAttachmentUsingPUT'][0])
    {

        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling uploadDisputeAttachmentUsingPUT'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling uploadDisputeAttachmentUsingPUT'
            );
        }


        $resourcePath = '/sale/dispute-attachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        # Preserve the original behavior of server indexing.
        if ($hostIndex === null) {
            $hostIndex = $this->hostIndex;
        }

        $hostSettings = $this->getHostSettingsForuploadDisputeAttachmentUsingPUT();

        if ($hostIndex < 0 || $hostIndex >= count($hostSettings)) {
            throw new \InvalidArgumentException("Invalid index {$hostIndex} when selecting the host. Must be less than ".count($hostSettings));
        }
        $operationHost = Configuration::getHostString($hostSettings, $hostIndex, $variables);
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Returns an array of host settings for Operation uploadDisputeAttachmentUsingPUT
     *
     * @return array an array of host settings
     */
    protected function getHostSettingsForuploadDisputeAttachmentUsingPUT(): array
    {
        return [
            [
                "url" => "https://upload.{environment}",
                "description" => "No description provided",
                "variables" => [
                    "environment" => [
                    "description" => "No description provided",
                    "default_value" => "allegro.pl",
                    "enum_values" => [
                        "allegro.pl",
                        "allegro.pl.allegrosandbox.pl",
                    ]
                    ]
                ]
            ]
        ];
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
