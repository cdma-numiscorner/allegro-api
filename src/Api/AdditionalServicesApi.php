<?php
/**
 * AdditionalServicesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AllegroApi\ApiException;
use AllegroApi\Configuration;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;

/**
 * AdditionalServicesApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdditionalServicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAdditionalServicesGroupUsingPOST' => [
            'application/vnd.allegro.public.v1+json',
        ],
        'getAdditionalServicesGroupUsingGET' => [
            'application/json',
        ],
        'getListOfAdditionalServicesDefinitionsCategoriesUsingGET' => [
            'application/json',
        ],
        'getListOfAdditionalServicesGroupsUsingGET' => [
            'application/json',
        ],
        'modifyAdditionalServicesGroupUsingPUT' => [
            'application/vnd.allegro.public.v1+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAdditionalServicesGroupUsingPOST
     *
     * Create additional services group
     *
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdditionalServicesGroupUsingPOST'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\AdditionalServicesGroupResponse
     */
    public function createAdditionalServicesGroupUsingPOST($additional_services_group_request, string $contentType = self::contentTypes['createAdditionalServicesGroupUsingPOST'][0])
    {
        list($response) = $this->createAdditionalServicesGroupUsingPOSTWithHttpInfo($additional_services_group_request, $contentType);
        return $response;
    }

    /**
     * Operation createAdditionalServicesGroupUsingPOSTWithHttpInfo
     *
     * Create additional services group
     *
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdditionalServicesGroupUsingPOST'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\AdditionalServicesGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdditionalServicesGroupUsingPOSTWithHttpInfo($additional_services_group_request, string $contentType = self::contentTypes['createAdditionalServicesGroupUsingPOST'][0])
    {
        $request = $this->createAdditionalServicesGroupUsingPOSTRequest($additional_services_group_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\AdditionalServicesGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\AdditionalServicesGroupResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdditionalServicesGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdditionalServicesGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdditionalServicesGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdditionalServicesGroupUsingPOSTAsync
     *
     * Create additional services group
     *
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdditionalServicesGroupUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdditionalServicesGroupUsingPOSTAsync($additional_services_group_request, string $contentType = self::contentTypes['createAdditionalServicesGroupUsingPOST'][0])
    {
        return $this->createAdditionalServicesGroupUsingPOSTAsyncWithHttpInfo($additional_services_group_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdditionalServicesGroupUsingPOSTAsyncWithHttpInfo
     *
     * Create additional services group
     *
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdditionalServicesGroupUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdditionalServicesGroupUsingPOSTAsyncWithHttpInfo($additional_services_group_request, string $contentType = self::contentTypes['createAdditionalServicesGroupUsingPOST'][0])
    {
        $returnType = '\AllegroApi\Model\AdditionalServicesGroupResponse';
        $request = $this->createAdditionalServicesGroupUsingPOSTRequest($additional_services_group_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdditionalServicesGroupUsingPOST'
     *
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdditionalServicesGroupUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAdditionalServicesGroupUsingPOSTRequest($additional_services_group_request, string $contentType = self::contentTypes['createAdditionalServicesGroupUsingPOST'][0])
    {

        // verify the required parameter 'additional_services_group_request' is set
        if ($additional_services_group_request === null || (is_array($additional_services_group_request) && count($additional_services_group_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $additional_services_group_request when calling createAdditionalServicesGroupUsingPOST'
            );
        }


        $resourcePath = '/sale/offer-additional-services/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($additional_services_group_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($additional_services_group_request));
            } else {
                $httpBody = $additional_services_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdditionalServicesGroupUsingGET
     *
     * Get the details of an additional services group
     *
     * @param  string $group_id Additional Service Group ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdditionalServicesGroupUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\AdditionalServicesGroupResponse
     */
    public function getAdditionalServicesGroupUsingGET($group_id, string $contentType = self::contentTypes['getAdditionalServicesGroupUsingGET'][0])
    {
        list($response) = $this->getAdditionalServicesGroupUsingGETWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation getAdditionalServicesGroupUsingGETWithHttpInfo
     *
     * Get the details of an additional services group
     *
     * @param  string $group_id Additional Service Group ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdditionalServicesGroupUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\AdditionalServicesGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdditionalServicesGroupUsingGETWithHttpInfo($group_id, string $contentType = self::contentTypes['getAdditionalServicesGroupUsingGET'][0])
    {
        $request = $this->getAdditionalServicesGroupUsingGETRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\AdditionalServicesGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\AdditionalServicesGroupResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdditionalServicesGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdditionalServicesGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdditionalServicesGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdditionalServicesGroupUsingGETAsync
     *
     * Get the details of an additional services group
     *
     * @param  string $group_id Additional Service Group ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdditionalServicesGroupUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalServicesGroupUsingGETAsync($group_id, string $contentType = self::contentTypes['getAdditionalServicesGroupUsingGET'][0])
    {
        return $this->getAdditionalServicesGroupUsingGETAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdditionalServicesGroupUsingGETAsyncWithHttpInfo
     *
     * Get the details of an additional services group
     *
     * @param  string $group_id Additional Service Group ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdditionalServicesGroupUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalServicesGroupUsingGETAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['getAdditionalServicesGroupUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\AdditionalServicesGroupResponse';
        $request = $this->getAdditionalServicesGroupUsingGETRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdditionalServicesGroupUsingGET'
     *
     * @param  string $group_id Additional Service Group ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdditionalServicesGroupUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdditionalServicesGroupUsingGETRequest($group_id, string $contentType = self::contentTypes['getAdditionalServicesGroupUsingGET'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling getAdditionalServicesGroupUsingGET'
            );
        }


        $resourcePath = '/sale/offer-additional-services/groups/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListOfAdditionalServicesDefinitionsCategoriesUsingGET
     *
     * Get the additional services definitions by categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\CategoriesResponse
     */
    public function getListOfAdditionalServicesDefinitionsCategoriesUsingGET(string $contentType = self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'][0])
    {
        list($response) = $this->getListOfAdditionalServicesDefinitionsCategoriesUsingGETWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getListOfAdditionalServicesDefinitionsCategoriesUsingGETWithHttpInfo
     *
     * Get the additional services definitions by categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\CategoriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListOfAdditionalServicesDefinitionsCategoriesUsingGETWithHttpInfo(string $contentType = self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'][0])
    {
        $request = $this->getListOfAdditionalServicesDefinitionsCategoriesUsingGETRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\CategoriesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\CategoriesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CategoriesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CategoriesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CategoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListOfAdditionalServicesDefinitionsCategoriesUsingGETAsync
     *
     * Get the additional services definitions by categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfAdditionalServicesDefinitionsCategoriesUsingGETAsync(string $contentType = self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'][0])
    {
        return $this->getListOfAdditionalServicesDefinitionsCategoriesUsingGETAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListOfAdditionalServicesDefinitionsCategoriesUsingGETAsyncWithHttpInfo
     *
     * Get the additional services definitions by categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfAdditionalServicesDefinitionsCategoriesUsingGETAsyncWithHttpInfo(string $contentType = self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\CategoriesResponse';
        $request = $this->getListOfAdditionalServicesDefinitionsCategoriesUsingGETRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListOfAdditionalServicesDefinitionsCategoriesUsingGET'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListOfAdditionalServicesDefinitionsCategoriesUsingGETRequest(string $contentType = self::contentTypes['getListOfAdditionalServicesDefinitionsCategoriesUsingGET'][0])
    {


        $resourcePath = '/sale/offer-additional-services/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListOfAdditionalServicesGroupsUsingGET
     *
     * Get the user&#39;s additional services groups
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\AdditionalServicesGroups
     */
    public function getListOfAdditionalServicesGroupsUsingGET($offset = 0, $limit = 100, string $contentType = self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'][0])
    {
        list($response) = $this->getListOfAdditionalServicesGroupsUsingGETWithHttpInfo($offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getListOfAdditionalServicesGroupsUsingGETWithHttpInfo
     *
     * Get the user&#39;s additional services groups
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\AdditionalServicesGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListOfAdditionalServicesGroupsUsingGETWithHttpInfo($offset = 0, $limit = 100, string $contentType = self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'][0])
    {
        $request = $this->getListOfAdditionalServicesGroupsUsingGETRequest($offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\AdditionalServicesGroups' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\AdditionalServicesGroups' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdditionalServicesGroups', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdditionalServicesGroups';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdditionalServicesGroups',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListOfAdditionalServicesGroupsUsingGETAsync
     *
     * Get the user&#39;s additional services groups
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfAdditionalServicesGroupsUsingGETAsync($offset = 0, $limit = 100, string $contentType = self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'][0])
    {
        return $this->getListOfAdditionalServicesGroupsUsingGETAsyncWithHttpInfo($offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListOfAdditionalServicesGroupsUsingGETAsyncWithHttpInfo
     *
     * Get the user&#39;s additional services groups
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListOfAdditionalServicesGroupsUsingGETAsyncWithHttpInfo($offset = 0, $limit = 100, string $contentType = self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'][0])
    {
        $returnType = '\AllegroApi\Model\AdditionalServicesGroups';
        $request = $this->getListOfAdditionalServicesGroupsUsingGETRequest($offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListOfAdditionalServicesGroupsUsingGET'
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit The limit of elements in the response. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListOfAdditionalServicesGroupsUsingGETRequest($offset = 0, $limit = 100, string $contentType = self::contentTypes['getListOfAdditionalServicesGroupsUsingGET'][0])
    {

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling AdditionalServicesApi.getListOfAdditionalServicesGroupsUsingGET, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AdditionalServicesApi.getListOfAdditionalServicesGroupsUsingGET, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AdditionalServicesApi.getListOfAdditionalServicesGroupsUsingGET, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/sale/offer-additional-services/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyAdditionalServicesGroupUsingPUT
     *
     * Modify an additional services group
     *
     * @param  string $group_id Additional service group ID. (required)
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyAdditionalServicesGroupUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\AdditionalServicesGroupResponse
     */
    public function modifyAdditionalServicesGroupUsingPUT($group_id, $additional_services_group_request, string $contentType = self::contentTypes['modifyAdditionalServicesGroupUsingPUT'][0])
    {
        list($response) = $this->modifyAdditionalServicesGroupUsingPUTWithHttpInfo($group_id, $additional_services_group_request, $contentType);
        return $response;
    }

    /**
     * Operation modifyAdditionalServicesGroupUsingPUTWithHttpInfo
     *
     * Modify an additional services group
     *
     * @param  string $group_id Additional service group ID. (required)
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyAdditionalServicesGroupUsingPUT'] to see the possible values for this operation
     *
     * @throws \AllegroApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\AdditionalServicesGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyAdditionalServicesGroupUsingPUTWithHttpInfo($group_id, $additional_services_group_request, string $contentType = self::contentTypes['modifyAdditionalServicesGroupUsingPUT'][0])
    {
        $request = $this->modifyAdditionalServicesGroupUsingPUTRequest($group_id, $additional_services_group_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\AdditionalServicesGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AllegroApi\Model\AdditionalServicesGroupResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdditionalServicesGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdditionalServicesGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdditionalServicesGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modifyAdditionalServicesGroupUsingPUTAsync
     *
     * Modify an additional services group
     *
     * @param  string $group_id Additional service group ID. (required)
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyAdditionalServicesGroupUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAdditionalServicesGroupUsingPUTAsync($group_id, $additional_services_group_request, string $contentType = self::contentTypes['modifyAdditionalServicesGroupUsingPUT'][0])
    {
        return $this->modifyAdditionalServicesGroupUsingPUTAsyncWithHttpInfo($group_id, $additional_services_group_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyAdditionalServicesGroupUsingPUTAsyncWithHttpInfo
     *
     * Modify an additional services group
     *
     * @param  string $group_id Additional service group ID. (required)
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyAdditionalServicesGroupUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAdditionalServicesGroupUsingPUTAsyncWithHttpInfo($group_id, $additional_services_group_request, string $contentType = self::contentTypes['modifyAdditionalServicesGroupUsingPUT'][0])
    {
        $returnType = '\AllegroApi\Model\AdditionalServicesGroupResponse';
        $request = $this->modifyAdditionalServicesGroupUsingPUTRequest($group_id, $additional_services_group_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyAdditionalServicesGroupUsingPUT'
     *
     * @param  string $group_id Additional service group ID. (required)
     * @param  \AllegroApi\Model\AdditionalServicesGroupRequest $additional_services_group_request Additional service group body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyAdditionalServicesGroupUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modifyAdditionalServicesGroupUsingPUTRequest($group_id, $additional_services_group_request, string $contentType = self::contentTypes['modifyAdditionalServicesGroupUsingPUT'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling modifyAdditionalServicesGroupUsingPUT'
            );
        }

        // verify the required parameter 'additional_services_group_request' is set
        if ($additional_services_group_request === null || (is_array($additional_services_group_request) && count($additional_services_group_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $additional_services_group_request when calling modifyAdditionalServicesGroupUsingPUT'
            );
        }


        $resourcePath = '/sale/offer-additional-services/groups/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($additional_services_group_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($additional_services_group_request));
            } else {
                $httpBody = $additional_services_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
