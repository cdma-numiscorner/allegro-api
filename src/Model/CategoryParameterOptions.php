<?php
/**
 * CategoryParameterOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Model;

use \ArrayAccess;
use \AllegroApi\ObjectSerializer;

/**
 * CategoryParameterOptions Class Doc Comment
 *
 * @category Class
 * @description A list of the different options which can be used with this parameter.
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CategoryParameterOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CategoryParameterOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'variants_allowed' => 'bool',
        'variants_equal' => 'bool',
        'ambiguous_value_id' => 'string',
        'depends_on_parameter_id' => 'string',
        'required_depends_on_value_ids' => 'string[]',
        'display_depends_on_value_ids' => 'string[]',
        'describes_product' => 'bool',
        'custom_values_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'variants_allowed' => null,
        'variants_equal' => null,
        'ambiguous_value_id' => null,
        'depends_on_parameter_id' => null,
        'required_depends_on_value_ids' => null,
        'display_depends_on_value_ids' => null,
        'describes_product' => null,
        'custom_values_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'variants_allowed' => false,
		'variants_equal' => false,
		'ambiguous_value_id' => false,
		'depends_on_parameter_id' => true,
		'required_depends_on_value_ids' => true,
		'display_depends_on_value_ids' => true,
		'describes_product' => false,
		'custom_values_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'variants_allowed' => 'variantsAllowed',
        'variants_equal' => 'variantsEqual',
        'ambiguous_value_id' => 'ambiguousValueId',
        'depends_on_parameter_id' => 'dependsOnParameterId',
        'required_depends_on_value_ids' => 'requiredDependsOnValueIds',
        'display_depends_on_value_ids' => 'displayDependsOnValueIds',
        'describes_product' => 'describesProduct',
        'custom_values_enabled' => 'customValuesEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'variants_allowed' => 'setVariantsAllowed',
        'variants_equal' => 'setVariantsEqual',
        'ambiguous_value_id' => 'setAmbiguousValueId',
        'depends_on_parameter_id' => 'setDependsOnParameterId',
        'required_depends_on_value_ids' => 'setRequiredDependsOnValueIds',
        'display_depends_on_value_ids' => 'setDisplayDependsOnValueIds',
        'describes_product' => 'setDescribesProduct',
        'custom_values_enabled' => 'setCustomValuesEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'variants_allowed' => 'getVariantsAllowed',
        'variants_equal' => 'getVariantsEqual',
        'ambiguous_value_id' => 'getAmbiguousValueId',
        'depends_on_parameter_id' => 'getDependsOnParameterId',
        'required_depends_on_value_ids' => 'getRequiredDependsOnValueIds',
        'display_depends_on_value_ids' => 'getDisplayDependsOnValueIds',
        'describes_product' => 'getDescribesProduct',
        'custom_values_enabled' => 'getCustomValuesEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('variants_allowed', $data ?? [], null);
        $this->setIfExists('variants_equal', $data ?? [], null);
        $this->setIfExists('ambiguous_value_id', $data ?? [], null);
        $this->setIfExists('depends_on_parameter_id', $data ?? [], null);
        $this->setIfExists('required_depends_on_value_ids', $data ?? [], null);
        $this->setIfExists('display_depends_on_value_ids', $data ?? [], null);
        $this->setIfExists('describes_product', $data ?? [], null);
        $this->setIfExists('custom_values_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets variants_allowed
     *
     * @return bool|null
     */
    public function getVariantsAllowed()
    {
        return $this->container['variants_allowed'];
    }

    /**
     * Sets variants_allowed
     *
     * @param bool|null $variants_allowed Parameters with this option enabled can be used for offer variants creation.
     *
     * @return self
     */
    public function setVariantsAllowed($variants_allowed)
    {
        if (is_null($variants_allowed)) {
            throw new \InvalidArgumentException('non-nullable variants_allowed cannot be null');
        }
        $this->container['variants_allowed'] = $variants_allowed;

        return $this;
    }

    /**
     * Gets variants_equal
     *
     * @return bool|null
     */
    public function getVariantsEqual()
    {
        return $this->container['variants_equal'];
    }

    /**
     * Sets variants_equal
     *
     * @param bool|null $variants_equal All offer variants must have the same values in parameters with this option enabled.
     *
     * @return self
     */
    public function setVariantsEqual($variants_equal)
    {
        if (is_null($variants_equal)) {
            throw new \InvalidArgumentException('non-nullable variants_equal cannot be null');
        }
        $this->container['variants_equal'] = $variants_equal;

        return $this;
    }

    /**
     * Gets ambiguous_value_id
     *
     * @return string|null
     */
    public function getAmbiguousValueId()
    {
        return $this->container['ambiguous_value_id'];
    }

    /**
     * Sets ambiguous_value_id
     *
     * @param string|null $ambiguous_value_id Indicates what value in the dictionary is defined as an ambiguous one. Only parameters with dictionaries might have this option defined.
     *
     * @return self
     */
    public function setAmbiguousValueId($ambiguous_value_id)
    {
        if (is_null($ambiguous_value_id)) {
            throw new \InvalidArgumentException('non-nullable ambiguous_value_id cannot be null');
        }
        $this->container['ambiguous_value_id'] = $ambiguous_value_id;

        return $this;
    }

    /**
     * Gets depends_on_parameter_id
     *
     * @return string|null
     */
    public function getDependsOnParameterId()
    {
        return $this->container['depends_on_parameter_id'];
    }

    /**
     * Sets depends_on_parameter_id
     *
     * @param string|null $depends_on_parameter_id Indicates whether this parameter's behaviour depends on another parameter's values: - allowed values (only for dictionary parameters; see: `dictionary[].dependsOnValueIds`), - optionality (see `requiredDependsOnValueIds`, this usage is deprecated and will be replaced by   `requiredIf` in the future), - visibility (see `displayDependsOnValueIds`, this usage is deprecated and will be replaced by `displayedIf`   in the future).
     *
     * @return self
     */
    public function setDependsOnParameterId($depends_on_parameter_id)
    {
        if (is_null($depends_on_parameter_id)) {
            array_push($this->openAPINullablesSetToNull, 'depends_on_parameter_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depends_on_parameter_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depends_on_parameter_id'] = $depends_on_parameter_id;

        return $this;
    }

    /**
     * Gets required_depends_on_value_ids
     *
     * @return string[]|null
     * @deprecated
     */
    public function getRequiredDependsOnValueIds()
    {
        return $this->container['required_depends_on_value_ids'];
    }

    /**
     * Sets required_depends_on_value_ids
     *
     * @param string[]|null $required_depends_on_value_ids Indicates whether this parameter's optionality depends on another parameter's values.  This parameter is required if `require` is `true` and either: - this field is `null` **or** - the parameter that this parameter depends on (see: `dependsOnParameterId`) has set any value ID from this array.  Otherwise this parameter is optional.  This field is deprecated and will be removed in the future. Please use `requiredIf` instead.
     *
     * @return self
     * @deprecated
     */
    public function setRequiredDependsOnValueIds($required_depends_on_value_ids)
    {
        if (is_null($required_depends_on_value_ids)) {
            array_push($this->openAPINullablesSetToNull, 'required_depends_on_value_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('required_depends_on_value_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['required_depends_on_value_ids'] = $required_depends_on_value_ids;

        return $this;
    }

    /**
     * Gets display_depends_on_value_ids
     *
     * @return string[]|null
     * @deprecated
     */
    public function getDisplayDependsOnValueIds()
    {
        return $this->container['display_depends_on_value_ids'];
    }

    /**
     * Sets display_depends_on_value_ids
     *
     * @param string[]|null $display_depends_on_value_ids Indicates whether this parameter's visibility depends on another parameter's values.  This parameter is visible if and only if: - this field is `null` **or** - the parameter that this parameter depends on (see: `dependsOnParameterId`) has set any value ID from this array.  Otherwise this parameter will not be displayed anywhere. Setting a value of a hidden parameter is permitted, nonetheless.  This field is deprecated and will be removed in the future. Please use `displayedIf` instead.
     *
     * @return self
     * @deprecated
     */
    public function setDisplayDependsOnValueIds($display_depends_on_value_ids)
    {
        if (is_null($display_depends_on_value_ids)) {
            array_push($this->openAPINullablesSetToNull, 'display_depends_on_value_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_depends_on_value_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_depends_on_value_ids'] = $display_depends_on_value_ids;

        return $this;
    }

    /**
     * Gets describes_product
     *
     * @return bool|null
     */
    public function getDescribesProduct()
    {
        return $this->container['describes_product'];
    }

    /**
     * Sets describes_product
     *
     * @param bool|null $describes_product Indicates if parameter is used to define products.
     *
     * @return self
     */
    public function setDescribesProduct($describes_product)
    {
        if (is_null($describes_product)) {
            throw new \InvalidArgumentException('non-nullable describes_product cannot be null');
        }
        $this->container['describes_product'] = $describes_product;

        return $this;
    }

    /**
     * Gets custom_values_enabled
     *
     * @return bool|null
     */
    public function getCustomValuesEnabled()
    {
        return $this->container['custom_values_enabled'];
    }

    /**
     * Sets custom_values_enabled
     *
     * @param bool|null $custom_values_enabled Indicates if a custom value can be added to a parameter with an ambiguous value.
     *
     * @return self
     */
    public function setCustomValuesEnabled($custom_values_enabled)
    {
        if (is_null($custom_values_enabled)) {
            throw new \InvalidArgumentException('non-nullable custom_values_enabled cannot be null');
        }
        $this->container['custom_values_enabled'] = $custom_values_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


