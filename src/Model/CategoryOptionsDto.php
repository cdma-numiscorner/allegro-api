<?php
/**
 * CategoryOptionsDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Model;

use \ArrayAccess;
use \AllegroApi\ObjectSerializer;

/**
 * CategoryOptionsDto Class Doc Comment
 *
 * @category Class
 * @description A list of the different options which can be used with this category.
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CategoryOptionsDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CategoryOptionsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advertisement' => 'bool',
        'advertisement_price_optional' => 'bool',
        'variants_by_color_pattern_allowed' => 'bool',
        'offers_with_product_publication_enabled' => 'bool',
        'product_creation_enabled' => 'bool',
        'custom_parameters_enabled' => 'bool',
        'seller_can_require_purchase_comments' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'advertisement' => null,
        'advertisement_price_optional' => null,
        'variants_by_color_pattern_allowed' => null,
        'offers_with_product_publication_enabled' => null,
        'product_creation_enabled' => null,
        'custom_parameters_enabled' => null,
        'seller_can_require_purchase_comments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'advertisement' => false,
		'advertisement_price_optional' => false,
		'variants_by_color_pattern_allowed' => false,
		'offers_with_product_publication_enabled' => false,
		'product_creation_enabled' => false,
		'custom_parameters_enabled' => false,
		'seller_can_require_purchase_comments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertisement' => 'advertisement',
        'advertisement_price_optional' => 'advertisementPriceOptional',
        'variants_by_color_pattern_allowed' => 'variantsByColorPatternAllowed',
        'offers_with_product_publication_enabled' => 'offersWithProductPublicationEnabled',
        'product_creation_enabled' => 'productCreationEnabled',
        'custom_parameters_enabled' => 'customParametersEnabled',
        'seller_can_require_purchase_comments' => 'sellerCanRequirePurchaseComments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertisement' => 'setAdvertisement',
        'advertisement_price_optional' => 'setAdvertisementPriceOptional',
        'variants_by_color_pattern_allowed' => 'setVariantsByColorPatternAllowed',
        'offers_with_product_publication_enabled' => 'setOffersWithProductPublicationEnabled',
        'product_creation_enabled' => 'setProductCreationEnabled',
        'custom_parameters_enabled' => 'setCustomParametersEnabled',
        'seller_can_require_purchase_comments' => 'setSellerCanRequirePurchaseComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertisement' => 'getAdvertisement',
        'advertisement_price_optional' => 'getAdvertisementPriceOptional',
        'variants_by_color_pattern_allowed' => 'getVariantsByColorPatternAllowed',
        'offers_with_product_publication_enabled' => 'getOffersWithProductPublicationEnabled',
        'product_creation_enabled' => 'getProductCreationEnabled',
        'custom_parameters_enabled' => 'getCustomParametersEnabled',
        'seller_can_require_purchase_comments' => 'getSellerCanRequirePurchaseComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('advertisement', $data ?? [], null);
        $this->setIfExists('advertisement_price_optional', $data ?? [], null);
        $this->setIfExists('variants_by_color_pattern_allowed', $data ?? [], null);
        $this->setIfExists('offers_with_product_publication_enabled', $data ?? [], null);
        $this->setIfExists('product_creation_enabled', $data ?? [], null);
        $this->setIfExists('custom_parameters_enabled', $data ?? [], null);
        $this->setIfExists('seller_can_require_purchase_comments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advertisement
     *
     * @return bool|null
     */
    public function getAdvertisement()
    {
        return $this->container['advertisement'];
    }

    /**
     * Sets advertisement
     *
     * @param bool|null $advertisement Indicates whether offers of type ADVERTISEMENT can be listed in this category.
     *
     * @return self
     */
    public function setAdvertisement($advertisement)
    {
        if (is_null($advertisement)) {
            throw new \InvalidArgumentException('non-nullable advertisement cannot be null');
        }
        $this->container['advertisement'] = $advertisement;

        return $this;
    }

    /**
     * Gets advertisement_price_optional
     *
     * @return bool|null
     */
    public function getAdvertisementPriceOptional()
    {
        return $this->container['advertisement_price_optional'];
    }

    /**
     * Sets advertisement_price_optional
     *
     * @param bool|null $advertisement_price_optional Indicates whether advertisements listed in this category must have a price given. If the value is `true` then you don't have to provide a price when listing an advertisement in this category.
     *
     * @return self
     */
    public function setAdvertisementPriceOptional($advertisement_price_optional)
    {
        if (is_null($advertisement_price_optional)) {
            throw new \InvalidArgumentException('non-nullable advertisement_price_optional cannot be null');
        }
        $this->container['advertisement_price_optional'] = $advertisement_price_optional;

        return $this;
    }

    /**
     * Gets variants_by_color_pattern_allowed
     *
     * @return bool|null
     */
    public function getVariantsByColorPatternAllowed()
    {
        return $this->container['variants_by_color_pattern_allowed'];
    }

    /**
     * Sets variants_by_color_pattern_allowed
     *
     * @param bool|null $variants_by_color_pattern_allowed Indicates whether you can combine offers from this category into variant sets based on the color and pattern.
     *
     * @return self
     */
    public function setVariantsByColorPatternAllowed($variants_by_color_pattern_allowed)
    {
        if (is_null($variants_by_color_pattern_allowed)) {
            throw new \InvalidArgumentException('non-nullable variants_by_color_pattern_allowed cannot be null');
        }
        $this->container['variants_by_color_pattern_allowed'] = $variants_by_color_pattern_allowed;

        return $this;
    }

    /**
     * Gets offers_with_product_publication_enabled
     *
     * @return bool|null
     */
    public function getOffersWithProductPublicationEnabled()
    {
        return $this->container['offers_with_product_publication_enabled'];
    }

    /**
     * Sets offers_with_product_publication_enabled
     *
     * @param bool|null $offers_with_product_publication_enabled Information whether the category supports assigning offers to a product.
     *
     * @return self
     */
    public function setOffersWithProductPublicationEnabled($offers_with_product_publication_enabled)
    {
        if (is_null($offers_with_product_publication_enabled)) {
            throw new \InvalidArgumentException('non-nullable offers_with_product_publication_enabled cannot be null');
        }
        $this->container['offers_with_product_publication_enabled'] = $offers_with_product_publication_enabled;

        return $this;
    }

    /**
     * Gets product_creation_enabled
     *
     * @return bool|null
     */
    public function getProductCreationEnabled()
    {
        return $this->container['product_creation_enabled'];
    }

    /**
     * Sets product_creation_enabled
     *
     * @param bool|null $product_creation_enabled Indicates whether the category supports creating products.
     *
     * @return self
     */
    public function setProductCreationEnabled($product_creation_enabled)
    {
        if (is_null($product_creation_enabled)) {
            throw new \InvalidArgumentException('non-nullable product_creation_enabled cannot be null');
        }
        $this->container['product_creation_enabled'] = $product_creation_enabled;

        return $this;
    }

    /**
     * Gets custom_parameters_enabled
     *
     * @return bool|null
     */
    public function getCustomParametersEnabled()
    {
        return $this->container['custom_parameters_enabled'];
    }

    /**
     * Sets custom_parameters_enabled
     *
     * @param bool|null $custom_parameters_enabled Indicates whether custom parameters can be added to offers in this category.
     *
     * @return self
     */
    public function setCustomParametersEnabled($custom_parameters_enabled)
    {
        if (is_null($custom_parameters_enabled)) {
            throw new \InvalidArgumentException('non-nullable custom_parameters_enabled cannot be null');
        }
        $this->container['custom_parameters_enabled'] = $custom_parameters_enabled;

        return $this;
    }

    /**
     * Gets seller_can_require_purchase_comments
     *
     * @return bool|null
     */
    public function getSellerCanRequirePurchaseComments()
    {
        return $this->container['seller_can_require_purchase_comments'];
    }

    /**
     * Sets seller_can_require_purchase_comments
     *
     * @param bool|null $seller_can_require_purchase_comments Indicates whether the category supports message to seller in `REQUIRED` mode.
     *
     * @return self
     */
    public function setSellerCanRequirePurchaseComments($seller_can_require_purchase_comments)
    {
        if (is_null($seller_can_require_purchase_comments)) {
            throw new \InvalidArgumentException('non-nullable seller_can_require_purchase_comments cannot be null');
        }
        $this->container['seller_can_require_purchase_comments'] = $seller_can_require_purchase_comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


