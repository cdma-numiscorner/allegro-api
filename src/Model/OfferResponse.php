<?php
/**
 * OfferResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Model;

use \ArrayAccess;
use \AllegroApi\ObjectSerializer;

/**
 * OfferResponse Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OfferResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OfferResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => '\AllegroApi\Model\OfferCategory',
        'additional_marketplaces' => 'array<string,\AllegroApi\Model\OfferAdditionalMarketplace>',
        'additional_services' => '\AllegroApi\Model\JustId',
        'after_sales_services' => '\AllegroApi\Model\AfterSalesServices',
        'attachments' => '\AllegroApi\Model\Attachment[]',
        'compatibility_list' => '\AllegroApi\Model\CompatibilityList',
        'contact' => '\AllegroApi\Model\JustId',
        'created_at' => '\DateTime',
        'custom_parameters' => '\AllegroApi\Model\CustomParameter[]',
        'delivery' => '\AllegroApi\Model\DeliveryFull',
        'description' => '\AllegroApi\Model\StandardizedDescription',
        'discounts' => '\AllegroApi\Model\Discounts',
        'external' => '\AllegroApi\Model\ExternalId',
        'fundraising_campaign' => '\AllegroApi\Model\JustId',
        'id' => 'string',
        'images' => '\AllegroApi\Model\ImageUrl[]',
        'location' => '\AllegroApi\Model\Location',
        'name' => 'string',
        'parameters' => '\AllegroApi\Model\Parameter[]',
        'payments' => '\AllegroApi\Model\Payments',
        'product' => '\AllegroApi\Model\JustId',
        'promotion' => '\AllegroApi\Model\Promotion',
        'publication' => '\AllegroApi\Model\Publication',
        'selling_mode' => '\AllegroApi\Model\SellingModeWithNetPrice',
        'tax' => '\AllegroApi\Model\ExtendedTax',
        'tax_settings' => '\AllegroApi\Model\OfferTaxSettings',
        'size_table' => '\AllegroApi\Model\JustId',
        'stock' => '\AllegroApi\Model\Stock',
        'tecdoc_specification' => '\AllegroApi\Model\TecdocSpecification',
        'b2b' => '\AllegroApi\Model\B2b',
        'message_to_seller_settings' => '\AllegroApi\Model\MessageToSellerSettings',
        'updated_at' => '\DateTime',
        'validation' => '\AllegroApi\Model\Validation',
        'language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'additional_marketplaces' => null,
        'additional_services' => null,
        'after_sales_services' => null,
        'attachments' => null,
        'compatibility_list' => null,
        'contact' => null,
        'created_at' => 'date-time',
        'custom_parameters' => null,
        'delivery' => null,
        'description' => null,
        'discounts' => null,
        'external' => null,
        'fundraising_campaign' => null,
        'id' => null,
        'images' => null,
        'location' => null,
        'name' => null,
        'parameters' => null,
        'payments' => null,
        'product' => null,
        'promotion' => null,
        'publication' => null,
        'selling_mode' => null,
        'tax' => null,
        'tax_settings' => null,
        'size_table' => null,
        'stock' => null,
        'tecdoc_specification' => null,
        'b2b' => null,
        'message_to_seller_settings' => null,
        'updated_at' => 'date-time',
        'validation' => null,
        'language' => 'BCP-47 language code'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category' => false,
		'additional_marketplaces' => false,
		'additional_services' => false,
		'after_sales_services' => false,
		'attachments' => false,
		'compatibility_list' => false,
		'contact' => false,
		'created_at' => false,
		'custom_parameters' => false,
		'delivery' => false,
		'description' => false,
		'discounts' => false,
		'external' => false,
		'fundraising_campaign' => false,
		'id' => false,
		'images' => false,
		'location' => false,
		'name' => false,
		'parameters' => false,
		'payments' => false,
		'product' => false,
		'promotion' => false,
		'publication' => false,
		'selling_mode' => false,
		'tax' => false,
		'tax_settings' => false,
		'size_table' => false,
		'stock' => false,
		'tecdoc_specification' => false,
		'b2b' => false,
		'message_to_seller_settings' => false,
		'updated_at' => false,
		'validation' => false,
		'language' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'additional_marketplaces' => 'additionalMarketplaces',
        'additional_services' => 'additionalServices',
        'after_sales_services' => 'afterSalesServices',
        'attachments' => 'attachments',
        'compatibility_list' => 'compatibilityList',
        'contact' => 'contact',
        'created_at' => 'createdAt',
        'custom_parameters' => 'customParameters',
        'delivery' => 'delivery',
        'description' => 'description',
        'discounts' => 'discounts',
        'external' => 'external',
        'fundraising_campaign' => 'fundraisingCampaign',
        'id' => 'id',
        'images' => 'images',
        'location' => 'location',
        'name' => 'name',
        'parameters' => 'parameters',
        'payments' => 'payments',
        'product' => 'product',
        'promotion' => 'promotion',
        'publication' => 'publication',
        'selling_mode' => 'sellingMode',
        'tax' => 'tax',
        'tax_settings' => 'taxSettings',
        'size_table' => 'sizeTable',
        'stock' => 'stock',
        'tecdoc_specification' => 'tecdocSpecification',
        'b2b' => 'b2b',
        'message_to_seller_settings' => 'messageToSellerSettings',
        'updated_at' => 'updatedAt',
        'validation' => 'validation',
        'language' => 'language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'additional_marketplaces' => 'setAdditionalMarketplaces',
        'additional_services' => 'setAdditionalServices',
        'after_sales_services' => 'setAfterSalesServices',
        'attachments' => 'setAttachments',
        'compatibility_list' => 'setCompatibilityList',
        'contact' => 'setContact',
        'created_at' => 'setCreatedAt',
        'custom_parameters' => 'setCustomParameters',
        'delivery' => 'setDelivery',
        'description' => 'setDescription',
        'discounts' => 'setDiscounts',
        'external' => 'setExternal',
        'fundraising_campaign' => 'setFundraisingCampaign',
        'id' => 'setId',
        'images' => 'setImages',
        'location' => 'setLocation',
        'name' => 'setName',
        'parameters' => 'setParameters',
        'payments' => 'setPayments',
        'product' => 'setProduct',
        'promotion' => 'setPromotion',
        'publication' => 'setPublication',
        'selling_mode' => 'setSellingMode',
        'tax' => 'setTax',
        'tax_settings' => 'setTaxSettings',
        'size_table' => 'setSizeTable',
        'stock' => 'setStock',
        'tecdoc_specification' => 'setTecdocSpecification',
        'b2b' => 'setB2b',
        'message_to_seller_settings' => 'setMessageToSellerSettings',
        'updated_at' => 'setUpdatedAt',
        'validation' => 'setValidation',
        'language' => 'setLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'additional_marketplaces' => 'getAdditionalMarketplaces',
        'additional_services' => 'getAdditionalServices',
        'after_sales_services' => 'getAfterSalesServices',
        'attachments' => 'getAttachments',
        'compatibility_list' => 'getCompatibilityList',
        'contact' => 'getContact',
        'created_at' => 'getCreatedAt',
        'custom_parameters' => 'getCustomParameters',
        'delivery' => 'getDelivery',
        'description' => 'getDescription',
        'discounts' => 'getDiscounts',
        'external' => 'getExternal',
        'fundraising_campaign' => 'getFundraisingCampaign',
        'id' => 'getId',
        'images' => 'getImages',
        'location' => 'getLocation',
        'name' => 'getName',
        'parameters' => 'getParameters',
        'payments' => 'getPayments',
        'product' => 'getProduct',
        'promotion' => 'getPromotion',
        'publication' => 'getPublication',
        'selling_mode' => 'getSellingMode',
        'tax' => 'getTax',
        'tax_settings' => 'getTaxSettings',
        'size_table' => 'getSizeTable',
        'stock' => 'getStock',
        'tecdoc_specification' => 'getTecdocSpecification',
        'b2b' => 'getB2b',
        'message_to_seller_settings' => 'getMessageToSellerSettings',
        'updated_at' => 'getUpdatedAt',
        'validation' => 'getValidation',
        'language' => 'getLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('additional_marketplaces', $data ?? [], null);
        $this->setIfExists('additional_services', $data ?? [], null);
        $this->setIfExists('after_sales_services', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('compatibility_list', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('custom_parameters', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('discounts', $data ?? [], null);
        $this->setIfExists('external', $data ?? [], null);
        $this->setIfExists('fundraising_campaign', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('parameters', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('promotion', $data ?? [], null);
        $this->setIfExists('publication', $data ?? [], null);
        $this->setIfExists('selling_mode', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('tax_settings', $data ?? [], null);
        $this->setIfExists('size_table', $data ?? [], null);
        $this->setIfExists('stock', $data ?? [], null);
        $this->setIfExists('tecdoc_specification', $data ?? [], null);
        $this->setIfExists('b2b', $data ?? [], null);
        $this->setIfExists('message_to_seller_settings', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('validation', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return \AllegroApi\Model\OfferCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \AllegroApi\Model\OfferCategory|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets additional_marketplaces
     *
     * @return array<string,\AllegroApi\Model\OfferAdditionalMarketplace>|null
     */
    public function getAdditionalMarketplaces()
    {
        return $this->container['additional_marketplaces'];
    }

    /**
     * Sets additional_marketplaces
     *
     * @param array<string,\AllegroApi\Model\OfferAdditionalMarketplace>|null $additional_marketplaces Settings for each additional marketplace.
     *
     * @return self
     */
    public function setAdditionalMarketplaces($additional_marketplaces)
    {
        if (is_null($additional_marketplaces)) {
            throw new \InvalidArgumentException('non-nullable additional_marketplaces cannot be null');
        }
        $this->container['additional_marketplaces'] = $additional_marketplaces;

        return $this;
    }

    /**
     * Gets additional_services
     *
     * @return \AllegroApi\Model\JustId|null
     */
    public function getAdditionalServices()
    {
        return $this->container['additional_services'];
    }

    /**
     * Sets additional_services
     *
     * @param \AllegroApi\Model\JustId|null $additional_services additional_services
     *
     * @return self
     */
    public function setAdditionalServices($additional_services)
    {
        if (is_null($additional_services)) {
            throw new \InvalidArgumentException('non-nullable additional_services cannot be null');
        }
        $this->container['additional_services'] = $additional_services;

        return $this;
    }

    /**
     * Gets after_sales_services
     *
     * @return \AllegroApi\Model\AfterSalesServices|null
     */
    public function getAfterSalesServices()
    {
        return $this->container['after_sales_services'];
    }

    /**
     * Sets after_sales_services
     *
     * @param \AllegroApi\Model\AfterSalesServices|null $after_sales_services after_sales_services
     *
     * @return self
     */
    public function setAfterSalesServices($after_sales_services)
    {
        if (is_null($after_sales_services)) {
            throw new \InvalidArgumentException('non-nullable after_sales_services cannot be null');
        }
        $this->container['after_sales_services'] = $after_sales_services;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \AllegroApi\Model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \AllegroApi\Model\Attachment[]|null $attachments List of offer attachments. You can attach up to 7 files to the offer – one per each attachment type as described in <a href=\"/documentation/#operation/createOfferAttachmentUsingPOST\" target=\"_blank\">uploading offer attachments flow</a>.
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets compatibility_list
     *
     * @return \AllegroApi\Model\CompatibilityList|null
     */
    public function getCompatibilityList()
    {
        return $this->container['compatibility_list'];
    }

    /**
     * Sets compatibility_list
     *
     * @param \AllegroApi\Model\CompatibilityList|null $compatibility_list compatibility_list
     *
     * @return self
     */
    public function setCompatibilityList($compatibility_list)
    {
        if (is_null($compatibility_list)) {
            throw new \InvalidArgumentException('non-nullable compatibility_list cannot be null');
        }
        $this->container['compatibility_list'] = $compatibility_list;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \AllegroApi\Model\JustId|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \AllegroApi\Model\JustId|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets custom_parameters
     *
     * @return \AllegroApi\Model\CustomParameter[]|null
     */
    public function getCustomParameters()
    {
        return $this->container['custom_parameters'];
    }

    /**
     * Sets custom_parameters
     *
     * @param \AllegroApi\Model\CustomParameter[]|null $custom_parameters List of custom parameters. You can add up to 4 custom parameters, each containing exactly one value.
     *
     * @return self
     */
    public function setCustomParameters($custom_parameters)
    {
        if (is_null($custom_parameters)) {
            throw new \InvalidArgumentException('non-nullable custom_parameters cannot be null');
        }
        $this->container['custom_parameters'] = $custom_parameters;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \AllegroApi\Model\DeliveryFull|null
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \AllegroApi\Model\DeliveryFull|null $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            throw new \InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \AllegroApi\Model\StandardizedDescription|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \AllegroApi\Model\StandardizedDescription|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \AllegroApi\Model\Discounts|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \AllegroApi\Model\Discounts|null $discounts discounts
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        if (is_null($discounts)) {
            throw new \InvalidArgumentException('non-nullable discounts cannot be null');
        }
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets external
     *
     * @return \AllegroApi\Model\ExternalId|null
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param \AllegroApi\Model\ExternalId|null $external external
     *
     * @return self
     */
    public function setExternal($external)
    {
        if (is_null($external)) {
            throw new \InvalidArgumentException('non-nullable external cannot be null');
        }
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets fundraising_campaign
     *
     * @return \AllegroApi\Model\JustId|null
     */
    public function getFundraisingCampaign()
    {
        return $this->container['fundraising_campaign'];
    }

    /**
     * Sets fundraising_campaign
     *
     * @param \AllegroApi\Model\JustId|null $fundraising_campaign fundraising_campaign
     *
     * @return self
     */
    public function setFundraisingCampaign($fundraising_campaign)
    {
        if (is_null($fundraising_campaign)) {
            throw new \InvalidArgumentException('non-nullable fundraising_campaign cannot be null');
        }
        $this->container['fundraising_campaign'] = $fundraising_campaign;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \AllegroApi\Model\ImageUrl[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \AllegroApi\Model\ImageUrl[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \AllegroApi\Model\Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \AllegroApi\Model\Location|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name (title) of an offer. Length cannot be more than 50 characters. Read more: <a href=\"../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#tytul-oferty\" target=\"_blank\">PL</a>  / <a href=\"../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-title\" target=\"_blank\">EN</a> .
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OfferResponse., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \AllegroApi\Model\Parameter[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \AllegroApi\Model\Parameter[]|null $parameters parameters
     *
     * @return self
     */
    public function setParameters($parameters)
    {
        if (is_null($parameters)) {
            throw new \InvalidArgumentException('non-nullable parameters cannot be null');
        }
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \AllegroApi\Model\Payments|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \AllegroApi\Model\Payments|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \AllegroApi\Model\JustId|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \AllegroApi\Model\JustId|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets promotion
     *
     * @return \AllegroApi\Model\Promotion|null
     */
    public function getPromotion()
    {
        return $this->container['promotion'];
    }

    /**
     * Sets promotion
     *
     * @param \AllegroApi\Model\Promotion|null $promotion promotion
     *
     * @return self
     */
    public function setPromotion($promotion)
    {
        if (is_null($promotion)) {
            throw new \InvalidArgumentException('non-nullable promotion cannot be null');
        }
        $this->container['promotion'] = $promotion;

        return $this;
    }

    /**
     * Gets publication
     *
     * @return \AllegroApi\Model\Publication|null
     */
    public function getPublication()
    {
        return $this->container['publication'];
    }

    /**
     * Sets publication
     *
     * @param \AllegroApi\Model\Publication|null $publication publication
     *
     * @return self
     */
    public function setPublication($publication)
    {
        if (is_null($publication)) {
            throw new \InvalidArgumentException('non-nullable publication cannot be null');
        }
        $this->container['publication'] = $publication;

        return $this;
    }

    /**
     * Gets selling_mode
     *
     * @return \AllegroApi\Model\SellingModeWithNetPrice|null
     */
    public function getSellingMode()
    {
        return $this->container['selling_mode'];
    }

    /**
     * Sets selling_mode
     *
     * @param \AllegroApi\Model\SellingModeWithNetPrice|null $selling_mode selling_mode
     *
     * @return self
     */
    public function setSellingMode($selling_mode)
    {
        if (is_null($selling_mode)) {
            throw new \InvalidArgumentException('non-nullable selling_mode cannot be null');
        }
        $this->container['selling_mode'] = $selling_mode;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \AllegroApi\Model\ExtendedTax|null
     * @deprecated
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \AllegroApi\Model\ExtendedTax|null $tax tax
     *
     * @return self
     * @deprecated
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tax_settings
     *
     * @return \AllegroApi\Model\OfferTaxSettings|null
     */
    public function getTaxSettings()
    {
        return $this->container['tax_settings'];
    }

    /**
     * Sets tax_settings
     *
     * @param \AllegroApi\Model\OfferTaxSettings|null $tax_settings tax_settings
     *
     * @return self
     */
    public function setTaxSettings($tax_settings)
    {
        if (is_null($tax_settings)) {
            throw new \InvalidArgumentException('non-nullable tax_settings cannot be null');
        }
        $this->container['tax_settings'] = $tax_settings;

        return $this;
    }

    /**
     * Gets size_table
     *
     * @return \AllegroApi\Model\JustId|null
     */
    public function getSizeTable()
    {
        return $this->container['size_table'];
    }

    /**
     * Sets size_table
     *
     * @param \AllegroApi\Model\JustId|null $size_table size_table
     *
     * @return self
     */
    public function setSizeTable($size_table)
    {
        if (is_null($size_table)) {
            throw new \InvalidArgumentException('non-nullable size_table cannot be null');
        }
        $this->container['size_table'] = $size_table;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return \AllegroApi\Model\Stock|null
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param \AllegroApi\Model\Stock|null $stock stock
     *
     * @return self
     */
    public function setStock($stock)
    {
        if (is_null($stock)) {
            throw new \InvalidArgumentException('non-nullable stock cannot be null');
        }
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets tecdoc_specification
     *
     * @return \AllegroApi\Model\TecdocSpecification|null
     */
    public function getTecdocSpecification()
    {
        return $this->container['tecdoc_specification'];
    }

    /**
     * Sets tecdoc_specification
     *
     * @param \AllegroApi\Model\TecdocSpecification|null $tecdoc_specification tecdoc_specification
     *
     * @return self
     */
    public function setTecdocSpecification($tecdoc_specification)
    {
        if (is_null($tecdoc_specification)) {
            throw new \InvalidArgumentException('non-nullable tecdoc_specification cannot be null');
        }
        $this->container['tecdoc_specification'] = $tecdoc_specification;

        return $this;
    }

    /**
     * Gets b2b
     *
     * @return \AllegroApi\Model\B2b|null
     */
    public function getB2b()
    {
        return $this->container['b2b'];
    }

    /**
     * Sets b2b
     *
     * @param \AllegroApi\Model\B2b|null $b2b b2b
     *
     * @return self
     */
    public function setB2b($b2b)
    {
        if (is_null($b2b)) {
            throw new \InvalidArgumentException('non-nullable b2b cannot be null');
        }
        $this->container['b2b'] = $b2b;

        return $this;
    }

    /**
     * Gets message_to_seller_settings
     *
     * @return \AllegroApi\Model\MessageToSellerSettings|null
     */
    public function getMessageToSellerSettings()
    {
        return $this->container['message_to_seller_settings'];
    }

    /**
     * Sets message_to_seller_settings
     *
     * @param \AllegroApi\Model\MessageToSellerSettings|null $message_to_seller_settings message_to_seller_settings
     *
     * @return self
     */
    public function setMessageToSellerSettings($message_to_seller_settings)
    {
        if (is_null($message_to_seller_settings)) {
            throw new \InvalidArgumentException('non-nullable message_to_seller_settings cannot be null');
        }
        $this->container['message_to_seller_settings'] = $message_to_seller_settings;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return \AllegroApi\Model\Validation|null
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param \AllegroApi\Model\Validation|null $validation validation
     *
     * @return self
     */
    public function setValidation($validation)
    {
        if (is_null($validation)) {
            throw new \InvalidArgumentException('non-nullable validation cannot be null');
        }
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Declared base language of the offer.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


