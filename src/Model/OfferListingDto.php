<?php
/**
 * OfferListingDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Model;

use \ArrayAccess;
use \AllegroApi\ObjectSerializer;

/**
 * OfferListingDto Class Doc Comment
 *
 * @category Class
 * @description An offer.
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OfferListingDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OfferListingDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'category' => '\AllegroApi\Model\OfferCategory',
        'primary_image' => '\AllegroApi\Model\OfferListingDtoImage',
        'selling_mode' => '\AllegroApi\Model\SellingMode',
        'sale_info' => '\AllegroApi\Model\OfferListingDtoV1SaleInfo',
        'stock' => '\AllegroApi\Model\OfferListingDtoV1Stock',
        'stats' => '\AllegroApi\Model\OfferListingDtoV1Stats',
        'publication' => '\AllegroApi\Model\OfferListingDtoV1Publication',
        'after_sales_services' => '\AllegroApi\Model\AfterSalesServices',
        'additional_services' => '\AllegroApi\Model\OfferAdditionalServices',
        'external' => '\AllegroApi\Model\ExternalId',
        'delivery' => '\AllegroApi\Model\OfferListingDtoV1Delivery',
        'b2b' => '\AllegroApi\Model\OfferListingDtoV1B2b',
        'fundraising_campaign' => '\AllegroApi\Model\JustId',
        'additional_marketplaces' => 'array<string,\AllegroApi\Model\OfferListingDtoV1AdditionalMarketplace>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'category' => null,
        'primary_image' => null,
        'selling_mode' => null,
        'sale_info' => null,
        'stock' => null,
        'stats' => null,
        'publication' => null,
        'after_sales_services' => null,
        'additional_services' => null,
        'external' => null,
        'delivery' => null,
        'b2b' => null,
        'fundraising_campaign' => null,
        'additional_marketplaces' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'category' => false,
		'primary_image' => false,
		'selling_mode' => false,
		'sale_info' => false,
		'stock' => false,
		'stats' => false,
		'publication' => false,
		'after_sales_services' => false,
		'additional_services' => false,
		'external' => false,
		'delivery' => false,
		'b2b' => false,
		'fundraising_campaign' => false,
		'additional_marketplaces' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'category' => 'category',
        'primary_image' => 'primaryImage',
        'selling_mode' => 'sellingMode',
        'sale_info' => 'saleInfo',
        'stock' => 'stock',
        'stats' => 'stats',
        'publication' => 'publication',
        'after_sales_services' => 'afterSalesServices',
        'additional_services' => 'additionalServices',
        'external' => 'external',
        'delivery' => 'delivery',
        'b2b' => 'b2b',
        'fundraising_campaign' => 'fundraisingCampaign',
        'additional_marketplaces' => 'additionalMarketplaces'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'category' => 'setCategory',
        'primary_image' => 'setPrimaryImage',
        'selling_mode' => 'setSellingMode',
        'sale_info' => 'setSaleInfo',
        'stock' => 'setStock',
        'stats' => 'setStats',
        'publication' => 'setPublication',
        'after_sales_services' => 'setAfterSalesServices',
        'additional_services' => 'setAdditionalServices',
        'external' => 'setExternal',
        'delivery' => 'setDelivery',
        'b2b' => 'setB2b',
        'fundraising_campaign' => 'setFundraisingCampaign',
        'additional_marketplaces' => 'setAdditionalMarketplaces'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'category' => 'getCategory',
        'primary_image' => 'getPrimaryImage',
        'selling_mode' => 'getSellingMode',
        'sale_info' => 'getSaleInfo',
        'stock' => 'getStock',
        'stats' => 'getStats',
        'publication' => 'getPublication',
        'after_sales_services' => 'getAfterSalesServices',
        'additional_services' => 'getAdditionalServices',
        'external' => 'getExternal',
        'delivery' => 'getDelivery',
        'b2b' => 'getB2b',
        'fundraising_campaign' => 'getFundraisingCampaign',
        'additional_marketplaces' => 'getAdditionalMarketplaces'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('primary_image', $data ?? [], null);
        $this->setIfExists('selling_mode', $data ?? [], null);
        $this->setIfExists('sale_info', $data ?? [], null);
        $this->setIfExists('stock', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('publication', $data ?? [], null);
        $this->setIfExists('after_sales_services', $data ?? [], null);
        $this->setIfExists('additional_services', $data ?? [], null);
        $this->setIfExists('external', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('b2b', $data ?? [], null);
        $this->setIfExists('fundraising_campaign', $data ?? [], null);
        $this->setIfExists('additional_marketplaces', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The offer ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The title of the offer.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \AllegroApi\Model\OfferCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \AllegroApi\Model\OfferCategory|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets primary_image
     *
     * @return \AllegroApi\Model\OfferListingDtoImage|null
     */
    public function getPrimaryImage()
    {
        return $this->container['primary_image'];
    }

    /**
     * Sets primary_image
     *
     * @param \AllegroApi\Model\OfferListingDtoImage|null $primary_image primary_image
     *
     * @return self
     */
    public function setPrimaryImage($primary_image)
    {
        if (is_null($primary_image)) {
            throw new \InvalidArgumentException('non-nullable primary_image cannot be null');
        }
        $this->container['primary_image'] = $primary_image;

        return $this;
    }

    /**
     * Gets selling_mode
     *
     * @return \AllegroApi\Model\SellingMode|null
     */
    public function getSellingMode()
    {
        return $this->container['selling_mode'];
    }

    /**
     * Sets selling_mode
     *
     * @param \AllegroApi\Model\SellingMode|null $selling_mode selling_mode
     *
     * @return self
     */
    public function setSellingMode($selling_mode)
    {
        if (is_null($selling_mode)) {
            throw new \InvalidArgumentException('non-nullable selling_mode cannot be null');
        }
        $this->container['selling_mode'] = $selling_mode;

        return $this;
    }

    /**
     * Gets sale_info
     *
     * @return \AllegroApi\Model\OfferListingDtoV1SaleInfo|null
     */
    public function getSaleInfo()
    {
        return $this->container['sale_info'];
    }

    /**
     * Sets sale_info
     *
     * @param \AllegroApi\Model\OfferListingDtoV1SaleInfo|null $sale_info sale_info
     *
     * @return self
     */
    public function setSaleInfo($sale_info)
    {
        if (is_null($sale_info)) {
            throw new \InvalidArgumentException('non-nullable sale_info cannot be null');
        }
        $this->container['sale_info'] = $sale_info;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return \AllegroApi\Model\OfferListingDtoV1Stock|null
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param \AllegroApi\Model\OfferListingDtoV1Stock|null $stock stock
     *
     * @return self
     */
    public function setStock($stock)
    {
        if (is_null($stock)) {
            throw new \InvalidArgumentException('non-nullable stock cannot be null');
        }
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \AllegroApi\Model\OfferListingDtoV1Stats|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \AllegroApi\Model\OfferListingDtoV1Stats|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets publication
     *
     * @return \AllegroApi\Model\OfferListingDtoV1Publication|null
     */
    public function getPublication()
    {
        return $this->container['publication'];
    }

    /**
     * Sets publication
     *
     * @param \AllegroApi\Model\OfferListingDtoV1Publication|null $publication publication
     *
     * @return self
     */
    public function setPublication($publication)
    {
        if (is_null($publication)) {
            throw new \InvalidArgumentException('non-nullable publication cannot be null');
        }
        $this->container['publication'] = $publication;

        return $this;
    }

    /**
     * Gets after_sales_services
     *
     * @return \AllegroApi\Model\AfterSalesServices|null
     */
    public function getAfterSalesServices()
    {
        return $this->container['after_sales_services'];
    }

    /**
     * Sets after_sales_services
     *
     * @param \AllegroApi\Model\AfterSalesServices|null $after_sales_services after_sales_services
     *
     * @return self
     */
    public function setAfterSalesServices($after_sales_services)
    {
        if (is_null($after_sales_services)) {
            throw new \InvalidArgumentException('non-nullable after_sales_services cannot be null');
        }
        $this->container['after_sales_services'] = $after_sales_services;

        return $this;
    }

    /**
     * Gets additional_services
     *
     * @return \AllegroApi\Model\OfferAdditionalServices|null
     */
    public function getAdditionalServices()
    {
        return $this->container['additional_services'];
    }

    /**
     * Sets additional_services
     *
     * @param \AllegroApi\Model\OfferAdditionalServices|null $additional_services additional_services
     *
     * @return self
     */
    public function setAdditionalServices($additional_services)
    {
        if (is_null($additional_services)) {
            throw new \InvalidArgumentException('non-nullable additional_services cannot be null');
        }
        $this->container['additional_services'] = $additional_services;

        return $this;
    }

    /**
     * Gets external
     *
     * @return \AllegroApi\Model\ExternalId|null
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param \AllegroApi\Model\ExternalId|null $external external
     *
     * @return self
     */
    public function setExternal($external)
    {
        if (is_null($external)) {
            throw new \InvalidArgumentException('non-nullable external cannot be null');
        }
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \AllegroApi\Model\OfferListingDtoV1Delivery|null
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \AllegroApi\Model\OfferListingDtoV1Delivery|null $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            throw new \InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets b2b
     *
     * @return \AllegroApi\Model\OfferListingDtoV1B2b|null
     */
    public function getB2b()
    {
        return $this->container['b2b'];
    }

    /**
     * Sets b2b
     *
     * @param \AllegroApi\Model\OfferListingDtoV1B2b|null $b2b b2b
     *
     * @return self
     */
    public function setB2b($b2b)
    {
        if (is_null($b2b)) {
            throw new \InvalidArgumentException('non-nullable b2b cannot be null');
        }
        $this->container['b2b'] = $b2b;

        return $this;
    }

    /**
     * Gets fundraising_campaign
     *
     * @return \AllegroApi\Model\JustId|null
     */
    public function getFundraisingCampaign()
    {
        return $this->container['fundraising_campaign'];
    }

    /**
     * Sets fundraising_campaign
     *
     * @param \AllegroApi\Model\JustId|null $fundraising_campaign fundraising_campaign
     *
     * @return self
     */
    public function setFundraisingCampaign($fundraising_campaign)
    {
        if (is_null($fundraising_campaign)) {
            throw new \InvalidArgumentException('non-nullable fundraising_campaign cannot be null');
        }
        $this->container['fundraising_campaign'] = $fundraising_campaign;

        return $this;
    }

    /**
     * Gets additional_marketplaces
     *
     * @return array<string,\AllegroApi\Model\OfferListingDtoV1AdditionalMarketplace>|null
     */
    public function getAdditionalMarketplaces()
    {
        return $this->container['additional_marketplaces'];
    }

    /**
     * Sets additional_marketplaces
     *
     * @param array<string,\AllegroApi\Model\OfferListingDtoV1AdditionalMarketplace>|null $additional_marketplaces Properties of the offer for each additional marketplace.
     *
     * @return self
     */
    public function setAdditionalMarketplaces($additional_marketplaces)
    {
        if (is_null($additional_marketplaces)) {
            throw new \InvalidArgumentException('non-nullable additional_marketplaces cannot be null');
        }
        $this->container['additional_marketplaces'] = $additional_marketplaces;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


